"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jurisprudencia_document_1 = require("./jurisprudencia-document");
describe("JurisprudenciaDocument", () => {
    const merge = jurisprudencia_document_1.JurisprudenciaDocumentContentKeys.concat(...jurisprudencia_document_1.JurisprudenciaDocumentStateKeys, ...jurisprudencia_document_1.JurisprudenciaDocumentHashKeys, ...jurisprudencia_document_1.JurisprudenciaDocumentObjectKeys, ...jurisprudencia_document_1.JurisprudenciaDocumentDateKeys, ...jurisprudencia_document_1.JurisprudenciaDocumentTextKeys, ...jurisprudencia_document_1.JurisprudenciaDocumentExactKeys, ...jurisprudencia_document_1.JurisprudenciaDocumentGenericKeys);
    test.each(jurisprudencia_document_1.JurisprudenciaDocumentKeys)("key %p exists in JurisprudenciaDocumentProperties", (key) => {
        expect(merge.includes(key)).toBeTruthy();
    });
    test.each(merge)("property %p exits in JurisprudenciaDocumentKeys", (key) => {
        expect(jurisprudencia_document_1.JurisprudenciaDocumentKeys.includes(key)).toBeTruthy();
    });
    test("Number of keys", () => {
        expect(merge.length).toBe(jurisprudencia_document_1.JurisprudenciaDocumentKeys.length);
    });
});
describe("There are 10 validators", () => {
    let keys = require("./jurisprudencia-document");
    expect(Object.keys(keys).filter(vs => vs.startsWith("is"))).toHaveLength(9);
    require("./jurisprudencia-document");
});
describe("validators", () => {
    test.each(Object.keys(jurisprudencia_document_1.JurisprudenciaDocumentProperties))("key %p is valid JurisprudenciaDocumentKey", (key) => {
        expect((0, jurisprudencia_document_1.isValidJurisprudenciaDocumentKey)(key)).toBeTruthy();
    });
    test("Random string", () => {
        let key = Math.random().toString();
        expect((0, jurisprudencia_document_1.isValidJurisprudenciaDocumentKey)(key)).toBeFalsy();
        expect((0, jurisprudencia_document_1.isJurisprudenciaDocumentStateKey)(key)).toBeFalsy();
        expect((0, jurisprudencia_document_1.isJurisprudenciaDocumentContentKey)(key)).toBeFalsy();
        expect((0, jurisprudencia_document_1.isJurisprudenciaDocumentHashKey)(key)).toBeFalsy();
        expect((0, jurisprudencia_document_1.isJurisprudenciaDocumentDateKey)(key)).toBeFalsy();
        expect((0, jurisprudencia_document_1.isJurisprudenciaDocumentTextKey)(key)).toBeFalsy();
        expect((0, jurisprudencia_document_1.isJurisprudenciaDocumentObjectKey)(key)).toBeFalsy();
        expect((0, jurisprudencia_document_1.isJurisprudenciaDocumentGenericKey)(key)).toBeFalsy();
        expect((0, jurisprudencia_document_1.isJurisprudenciaDocumentExactKey)(key)).toBeFalsy();
    });
    test("Key can only be of one type", () => {
        jurisprudencia_document_1.JurisprudenciaDocumentKeys.forEach((key) => {
            expect((+(0, jurisprudencia_document_1.isJurisprudenciaDocumentStateKey)(key)) +
                (+(0, jurisprudencia_document_1.isJurisprudenciaDocumentContentKey)(key)) +
                (+(0, jurisprudencia_document_1.isJurisprudenciaDocumentHashKey)(key)) +
                (+(0, jurisprudencia_document_1.isJurisprudenciaDocumentDateKey)(key)) +
                (+(0, jurisprudencia_document_1.isJurisprudenciaDocumentTextKey)(key)) +
                (+(0, jurisprudencia_document_1.isJurisprudenciaDocumentObjectKey)(key)) +
                (+(0, jurisprudencia_document_1.isJurisprudenciaDocumentGenericKey)(key)) +
                (+(0, jurisprudencia_document_1.isJurisprudenciaDocumentExactKey)(key))).toBe(1);
        });
    });
});
